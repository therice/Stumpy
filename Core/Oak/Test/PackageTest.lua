local AddOnName, AddOn

describe("Package", function()
    setup(function()
        AddOnName, AddOn = loadfile("Test/TestSetup.lua")(false, 'Instance')
        loadfile("Core/Oak/Test/BaseTest.lua")()
        LoadDependencies(AddOnName, AddOn)
    end)
    
    teardown(function()
        After()
        AddOn.DiscardPackages()
    end)
    
   describe("new package", function()
       it("fails with invalid arguments", function()
           assert.has.errors(function () AddOn.Package(1) end)
           assert.has.errors(function () AddOn.Package({}) end)
           assert.has.errors(function () AddOn.Package(function() end) end)
       end)
       it("succeeds on repeated definition", function()
           local c1 = AddOn.Package("c")
           assert.is.table(c1)
           local c2 = AddOn.Package("c")
           assert.are.same(c1, c2)
       end)
   end)
    
    describe("import package", function()
        it("returns correct package", function()
            local c1 = AddOn.Package("TestC")
            local c2 = AddOn.ImportPackage("TestC")
            assert.are.same(c1, c2)
        end)
        it("fails when package does not exit", function()
            assert.has.errors(
                function() AddOn.ImportPackage("TestC2") end,
                "Package 'TestC2' does not exist"
            )
        end)
    end)

    describe("new class", function()
        it("fails with invalid arguments", function()
            assert.has.errors(function() AddOn.Package('p'):Class() end, 'Class name was not provided')
            AddOn.DiscardPackages()
            assert.has.errors(function() AddOn.Package('p'):Class('c', true) end, 'Superclass was of incorrect type \'boolean\'')
            AddOn.DiscardPackages()
        end)
        it("fails on repeated definition", function()
            local p = AddOn.Package('p')
            p:Class('c')
            assert.has.errors(function() p:Class('c') end, "Class 'c' already defined in Package 'p'")
            p:DiscardClasses()
            AddOn.DiscardPackages()
        end)
    end)

    describe("access class", function()
        it("returns correct class", function()
            local p = AddOn.Package('p')
            local c1 = p:Class('c')
            local c2 = p['c']
            local c3 = p.c
            assert.are.same(c1, c2)
            assert.are.same(c2, c3)
            AddOn.DiscardPackages()
        end)
        it("fails when class does not exist", function()
            assert.has.errors(function() local c = AddOn.Package('p').c end, "Class 'c' does not exist in Package 'p'")
            AddOn.DiscardPackages()
        end)
    end)
end)